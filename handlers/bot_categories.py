from bot_instance import bot
from telebot import types
from bot_logging import *
from markups import *
from utils.bot_db import *

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}
text_error = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞"

# –ø–æ–∫–∞ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏–ª–∏ –¥–æ—Ö–æ–¥–æ–≤
def unified_show_categories_menu(user_id, message_id, source_type):
    try:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚ûï –î–æ—Ö–æ–¥—ã", callback_data="categories_income"))
        markup.add(types.InlineKeyboardButton("‚ûñ –†–∞—Å—Ö–æ–¥—ã", callback_data="categories_expense"))
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu"))
        
        user_states.pop(user_id, None)
        text = "üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–æ–≤ –∏–ª–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤:"
        

        if source_type == "call":
            bot.edit_message_text(chat_id = user_id,
                            message_id = message_id, 
                            text=text, 
                            reply_markup=markup
                            )
        elif source_type == "command":
            bot.send_message(user_id, text, reply_markup=markup)
    except Exception as e:
        logger.error("Error %s", e)

        if source_type == "call":
            bot.edit_message_text(chat_id = user_id,
                            message_id = message_id, 
                            text=text_error, 
                            reply_markup=markup
                            )
        elif source_type == "command":
            bot.send_message(user_id, text_error, reply_markup=markup)

@bot.message_handler(commands=["categories"])
def handle_show_categories_menu(message):
    user_id = message.from_user.id
    message_id = message.message_id
    unified_show_categories_menu(user_id, message_id, source_type = "command")

@bot.callback_query_handler(func=lambda call: call.data == "categories")
def show_categories_menu(call):
    user_id = call.from_user.id
    message_id = call.message.message_id

    unified_show_categories_menu(user_id, message_id, source_type = "call")
    bot.answer_callback_query(call.id)

# –ø–æ–∫–∞–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏–ª–∏ –¥–æ—Ö–æ–¥–æ–≤
def unified_show_categories_expense_and_income(user_id, message_id, source_type):
    """–ü–æ–∫–∞–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞—Å—Ö–æ–¥–æ–≤"""
    try:
        categories = get_categories(user_id)
        is_call = source_type.split("_")[0] == "call"
        is_expense_type = source_type.split("_")[1] == "expense"

        user_states.pop(user_id, None)
        
        if is_expense_type:
            message = "üìã –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤\n\n"
        else:
            message = "üìã –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–æ–≤ \n\n" 

        if categories:
            message += "–í–∞—à–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n"
            for category_id, name, is_default, is_expense in categories:
                if is_expense_type:
                    if is_expense:
                        message += f"üü¢ {name}\n"
                else:
                    if not is_expense:
                        message += f"üü¢ {name}\n"
        else:
            message += "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π"
        
        if is_call:
            bot.edit_message_text(
                chat_id=user_id,
                message_id=message_id,
                text=message,
                reply_markup=category_menu_markup(is_expense_type)
            )
        else:
            bot.send_message(user_id, message, reply_markup=category_menu_markup(is_expense_type))
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ %s –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π", e)

        if is_call:
            bot.edit_message_text(
                chat_id=user_id,
                message_id=message_id,
                text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π",
                reply_markup=back_markup("back_to_main")
            )
        else:
            bot.send_message(user_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π", reply_markup=back_markup("back_to_main"))

@bot.message_handler(commands=["categories_expense"])
def handle_show_categories_expense(message):
    user_id = message.from_user.id
    message_id = message.message_id
    unified_show_categories_expense_and_income(user_id, message_id, source_type = "command_expense")

@bot.callback_query_handler(func = lambda call: call.data == "categories_expense")
def show_categories_expense(call):
    user_id = call.from_user.id
    message_id = call.message.message_id
    unified_show_categories_expense_and_income(user_id, message_id, source_type="call_expense")
    bot.answer_callback_query(call.id)
    
@bot.message_handler(commands=["categories_income"])
def handle_show_categories_income(message):
    user_id = message.from_user.id
    message_id = message.message_id
    unified_show_categories_expense_and_income(user_id, message_id, source_type = "command_income")

@bot.callback_query_handler(func = lambda call: call.data == "categories_income")
def show_categories_income(call):
    user_id = call.from_user.id
    message_id = call.message.message_id
    unified_show_categories_expense_and_income(user_id, message_id, source_type="call_income")
    bot.answer_callback_query(call.id)
    

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–Ω–∏ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
@bot.callback_query_handler(func=lambda call: call.data.startswith("add_category_"))
def start_add_category(call):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    is_expense_type = call.data.split("_")[2] == "expense"
    expense_or_income_type = 'expense' if is_expense_type else 'income'

    try:
        user_id = call.from_user.id
        user_states[user_id] = {"state": f"waiting_for_category_name_{expense_or_income_type}"}
    
        
        bot.answer_callback_query(call.id)
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
            reply_markup=cancel_markup(f"categories_{expense_or_income_type}")
        )
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ %s –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", e)
        bot.answer_callback_query(call.id)
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞",
            reply_markup=back_markup(f"categories_{expense_or_income_type}")
        )

@bot.message_handler(func=lambda message: user_states.get(message.chat.id, {}).get("state", "").startswith("waiting_for_category_name"))
def handle_new_category_name(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""    
    try:
        message_id = message.message_id
        user_id = message.chat.id
        is_expense_type = user_states[user_id]["state"].split("_")[-1] == "expense"
        expense_or_income_type = 'expense' if is_expense_type else 'income'
        category_name = message.text.strip().lower()
        
        if add_category(user_id, category_name, is_expense_type):
            bot.send_message(
                chat_id=user_id,
                text=f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è <b>{category_name}</b> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞",
                parse_mode="HTML"
            )
            unified_show_categories_expense_and_income(user_id, message_id, source_type=f"command_{expense_or_income_type}")
        else:
            bot.send_message(
                chat_id=user_id,
                text="‚ùå –¢–∞–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
            )
            unified_show_categories_expense_and_income(user_id, message_id, source_type=f"command_{expense_or_income_type}")
        
        user_states.pop(user_id, None)
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ %s –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", e)
        bot.send_message(
            chat_id=user_id,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
            reply_markup=back_markup(f"categories_{'expense' if is_expense_type else 'income'}")
        )
        user_states.pop(user_id, None)

@bot.callback_query_handler(func=lambda call: call.data.startswith("edit_category_"))
def start_edit_category(call):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    try:
        user_id = call.from_user.id
        is_expense_type = call.data.split("_")[-1] == "expense"
        expense_or_income_type = "expense" if is_expense_type else "income"
        categories = get_categories(user_id)

        user_states.pop(user_id, None)
        
        if not categories:
            bot.answer_callback_query(call.id)
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text="–£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è",
                reply_markup=back_markup(f"categories_{expense_or_income_type}")
            )
            return
        
        markup = types.InlineKeyboardMarkup()
        for category_id, name, is_default, is_expense in categories:
            if is_expense_type:
                if is_expense:
                    markup.add(types.InlineKeyboardButton(
                        f"‚úèÔ∏è {name}",
                        callback_data=f"edit_id_category_expense_{category_id}"
                    ))
            else:
                if not is_expense:
                    markup.add(types.InlineKeyboardButton(
                        f"‚úèÔ∏è {name}",
                        callback_data=f"edit_id_category_income_{category_id}"
                    ))
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"categories_{expense_or_income_type}"))
        
        bot.answer_callback_query(call.id)
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
            reply_markup=markup
        )
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ %s –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", e)
        bot.answer_callback_query(call.id)
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞",
            reply_markup=back_markup(f"categories_{expense_or_income_type}")
        )

@bot.callback_query_handler(func=lambda call: call.data.startswith("edit_id_category_"))
def handle_edit_category_selection(call):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è"""
    try:
        
        user_id = call.from_user.id
        is_expense_type = call.data.split("_")[-2] == "expense"
        expense_or_income_type = "expense" if is_expense_type else "income"
        category_id = int(call.data.split("_")[-1])
    
        user_states[user_id] = {
            "state": f"waiting_for_new_category_name_{expense_or_income_type}",
            "category_id": category_id
        }
        
        bot.answer_callback_query(call.id)
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
            reply_markup=cancel_markup(f"edit_category_{expense_or_income_type}")
        )
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ %s –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è", e)
        bot.answer_callback_query(call.id)
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞",
            reply_markup=back_markup(f"categories_{expense_or_income_type}")
        )

@bot.message_handler(func=lambda message: user_states.get(message.chat.id, {}).get("state", "").startswith("waiting_for_new_category_name"))
def handle_new_category_name_edit(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    try:
        user_id = message.chat.id
        message_id = message.message_id
        state = user_states[user_id]
        category_id = state["category_id"]
        new_name = message.text.strip().lower()

        is_expense_type = user_states[user_id]["state"].split("_")[-1] == "expense"
        expense_or_income_type = "expense" if is_expense_type else "income"
        
        if update_category(user_id, category_id, new_name):
            bot.send_message(
                chat_id=user_id,
                text=f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ <b>{new_name}</b>",
                parse_mode="HTML"
            )
            unified_show_categories_expense_and_income(user_id, message_id, source_type=f"command_{expense_or_income_type}")
        else:
            bot.send_message(
                chat_id=user_id,
                text="‚ùå –¢–∞–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
            )
            unified_show_categories_expense_and_income(user_id, message_id, source_type=f"command_{expense_or_income_type}")
        
        user_states.pop(user_id, None)
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ %s –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", e)
        bot.send_message(
            chat_id=user_id,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
            reply_markup=back_markup(f"categories_{expense_or_income_type}")
        )
        user_states.pop(user_id, None)

@bot.callback_query_handler(func=lambda call: call.data.startswith("delete_category_"))
def start_delete_category(call):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    try:
        is_expense_type = call.data.split("_")[-1] == "expense"
        expense_or_income_type = "expense" if is_expense_type else "income"
        user_id = call.from_user.id
        categories = get_categories(user_id)
        
        if not categories:
            bot.answer_callback_query(call.id)
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text="–£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è",
                reply_markup=back_markup(f"categories_{expense_or_income_type}")
            )
            return
        
        markup = types.InlineKeyboardMarkup()
        for category_id, name, is_default, is_expense in categories:
            if is_expense_type:
                if is_expense:
                    markup.add(types.InlineKeyboardButton(
                        f"‚ùå {name}",
                        callback_data=f"delete_id_category_{expense_or_income_type}_{category_id}"
                    ))
            else:
                if not is_expense:
                    markup.add(types.InlineKeyboardButton(
                        f"‚ùå {name}",
                        callback_data=f"delete_id_category_{expense_or_income_type}_{category_id}"
                    ))
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"categories_{expense_or_income_type}"))
        
        bot.answer_callback_query(call.id)
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=markup
        )
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ %s –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", e)
        bot.answer_callback_query(call.id)
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞",
            reply_markup=back_markup(f"categories_{expense_or_income_type}")
        )

@bot.callback_query_handler(func=lambda call: call.data.startswith("delete_id_category_"))
def handle_delete_category(call):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    try:
        user_id = call.from_user.id
        message_id = call.message.message_id
        category_id = int(call.data.split("_")[-1])
        is_expense_type = call.data.split("_")[-2] == "expense"
        expense_or_income_type = "expense" if is_expense_type else "income"
        category_name = get_category_name(category_id).lower()
        
        if delete_category(user_id, category_id):
            bot.answer_callback_query(call.id)
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è <b>{category_name}</b> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞",
                parse_mode="HTML"
            )
            unified_show_categories_expense_and_income(user_id, message_id, source_type=f"command_{expense_or_income_type}")
        else:
            bot.answer_callback_query(call.id)
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text="‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –±–∞–∑–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
                reply_markup=back_markup(f"categories_{expense_or_income_type}")
            )
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ %s –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", e)
        bot.answer_callback_query(call.id)
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
            reply_markup=back_markup(f"categories_{expense_or_income_type}")
        ) 